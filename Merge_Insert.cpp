#include <iostream>
using namespace std;

class MedeTempo {
private:
    string funcao;
    clock_t inicio;
public:
    MedeTempo(const string &f) {
        inicio = clock();
        funcao = f;
    }
    ~MedeTempo() {
        clock_t total = clock() - inicio;
        cout << "Tempo para a funcao " << funcao << ": (segundos) "<< double(total)/CLOCKS_PER_SEC<<endl;
    }
};

void insertionSort(int arr[], int n)
{
    int i, chave, j;
    for (i = 1; i < n; i++)
    {
        chave = arr[i];
        j = i - 1;

        while (j >= 0 && arr[j] > chave)
        {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = chave;
    }
}

void merge(int *arr, int inicio, int fim, int meio)
{
    int i, j, k;
    int *c  = (int*)malloc((fim-inicio+1)*sizeof(int));
    i = inicio;
    k = inicio;
    j = meio + 1;
    while (i <= meio && j <= fim) {
        if (arr[i] < arr[j]) {
            c[k] = arr[i];
            k++;
            i++;
        }
        else  {
            c[k] = arr[j];
            k++;
            j++;
        }
    }
    while (i <= meio) {
        c[k] = arr[i];
        k++;
        i++;
    }
    while (j <= fim) {
        c[k] = arr[j];
        k++;
        j++;
    }
    for (i = inicio; i < k; i++)  {
        arr[i] = c[i];
    }
}

void mergeSort(int *arr, int inicio, int fim)
{
    int meio;
    if (inicio < fim){
        meio= (inicio + fim) / 2;
        mergeSort(arr, inicio, meio);
        mergeSort(arr, meio + 1, fim);
        merge(arr, inicio, fim, meio);
    }
}

int main()
{
    MedeTempo mt("main");
//    int tamanho = 10;
//    int vetor[10] = {3, 8, 10, 10, 1, 3, 5, 8, 10, 10};
//    int tamanho =20;
//    int vetor[20] ={19, 7, 14, 18, 16, 13, 20, 9, 6, 12, 0, 20, 16, 20, 1, 14, 20, 16, 10, 11};
//    int tamanho =30;
//    int vetor[30] ={15, 2, 30, 27, 11, 17, 7, 0, 3, 22, 7, 19, 23, 20, 28, 22, 25, 19, 4, 12, 0, 27, 18, 14, 26, 7, 15, 7, 21, 25};
//    int tamanho =40;
//    int vetor[40] ={28, 26, 3, 19, 19, 39, 27, 25, 18, 7, 19, 16, 29, 28, 5, 32, 40, 38, 1, 12, 11, 30, 11, 30, 23, 20, 26, 26, 7, 3, 16, 40, 3, 3, 4, 21, 34, 17, 21, 9};
//    int tamanho =50;
//    int vetor[50] ={45, 45, 26, 45, 21, 24, 25, 46, 25, 33, 7, 1, 28, 42, 37, 11, 26, 50, 28, 42, 6, 14, 5, 39, 34, 1, 15, 31, 16, 38, 30, 7, 16, 6, 41, 33, 34, 47, 37, 27, 37, 19, 19, 13, 19, 42, 3, 42, 11, 24};
//    int tamanho =60;
//    int vetor[60] ={47, 31, 52, 28, 13, 30, 10, 10, 6, 22, 50, 44, 41, 52, 32, 22, 14, 30, 41, 53, 25, 15, 54, 42, 23, 9, 38, 60, 57, 40, 37, 51, 21, 16, 1, 23, 15, 40, 32, 16, 32, 31, 27, 24, 23, 31, 18, 31, 41, 26, 8, 39, 40, 39, 25, 42, 14, 0, 5, 5};
//    int tamanho =70;
//    int vetor[70] = {69, 36, 67, 22, 5, 4, 52, 54, 47, 67, 27, 7, 67, 61, 41, 2, 55, 3, 19, 69, 47, 49, 28, 29, 4, 19, 10, 32, 18, 19, 50, 11, 13, 43, 48, 49, 56, 8, 26, 18, 17, 5, 59, 56, 52, 61, 32, 11, 38, 44, 69, 3, 5, 54, 14, 55, 3, 12, 61, 16, 1, 25, 13, 4, 37, 54, 31, 9, 42, 23};
//    int tamanho =80;
//    int vetor[80] ={2, 49, 24, 73, 15, 17, 27, 78, 36, 34, 18, 2, 52, 2, 38, 19, 41, 6, 20, 33, 48, 2, 52, 1, 77, 77, 10, 0, 3, 22, 77, 29, 48, 24, 6, 13, 29, 77, 39, 11, 69, 31, 59, 70, 47, 49, 50, 23, 3, 48, 18, 17, 24, 28, 2, 59, 59, 28, 17, 35, 76, 18, 56, 62, 9, 62, 32, 78, 17, 16, 48, 3, 30, 40, 57, 7, 43, 58, 19, 37};
//    int tamanho =90;
//    int vetor[90] ={40, 31, 13, 51, 79, 27, 3, 3, 33, 12, 60, 71, 5, 11, 34, 0, 62, 62, 72, 61, 2, 30, 4, 15, 1, 28, 70, 77, 68, 82, 71, 21, 5, 83, 73, 89, 88, 74, 8, 37, 41, 47, 38, 73, 38, 2, 39, 5, 56, 10, 23, 56, 22, 23, 42, 7, 7, 83, 82, 48, 12, 23, 31, 6, 35, 39, 47, 0, 50, 52, 71, 60, 55, 7, 20, 20, 44, 46, 45, 31, 80, 37, 59, 2, 70, 63, 53, 80, 67, 90};
    int vetor[100] = {33502, 240659, 596014, 949944, 266062, 530580, 703095, 815822, 62109, 340245, 372712, 794971, 9502, 968381, 790274, 709418, 187526, 86452, 647998, 581189, 669940, 851761, 734099, 87879, 87964, 152075, 334006, 459626, 336189, 833395, 300399, 21561, 922603, 986683, 649630, 952624, 634438, 138276, 675470, 343774, 362052, 254427, 910915, 741445, 975368, 241060, 882642, 743010, 136078, 176333, 169034, 908421, 631157, 537439, 995044, 882122, 326701, 70010, 924993, 891164, 834341, 447640, 367408, 451734, 871643, 25939, 257002, 81867, 542029, 601279, 66692, 450490, 700491, 678191, 742343, 335711, 173573, 508377, 315343, 64644, 188925, 81510, 622115, 649432, 777645, 23029, 49257, 915591, 895757, 710057, 408581, 168486, 377377, 879830, 212545, 193669, 849373, 424114, 689344, 632853};
    int tamanho = 100;
    insertionSort(vetor, tamanho);
    //mergeSort(vetor, 0, tamanho-1);
    cout<<"Elementos ordenados\n";
    for (int i = 0; i < tamanho; i++)
    {
        cout<<vetor[i]<<"\t";
    }
    cout << endl;
}